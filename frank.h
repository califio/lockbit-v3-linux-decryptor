#ifndef _FRANK
#define _FRANK
#include <stdint.h>

#define _FILE_OFFSET_BITS 64
#define SIZE              0x80
#define SALSA_KEY_SIZE    0x40

typedef struct __attribute__((__packed__)) _RSA_dn {
    unsigned char d[SIZE];
    unsigned char n[SIZE];
} RSA_dn;

unsigned char rsa_decrypt[] = {
  0x55, 0x8b, 0xec, 0x81, 0xec, 0x34, 0x01, 0x00, 0x00, 0x53, 0x51, 0x56,
  0x57, 0x8d, 0x85, 0x70, 0xff, 0xff, 0xff, 0x83, 0xc0, 0x0f, 0x83, 0xe0,
  0xf0, 0x89, 0x85, 0xdc, 0xfe, 0xff, 0xff, 0x8d, 0x85, 0xe0, 0xfe, 0xff,
  0xff, 0x83, 0xc0, 0x0f, 0x83, 0xe0, 0xf0, 0x89, 0x85, 0xd8, 0xfe, 0xff,
  0xff, 0x66, 0x0f, 0xef, 0xc0, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x8b, 0x85,
  0xdc, 0xfe, 0xff, 0xff, 0x8b, 0xf8, 0x66, 0x0f, 0x7f, 0x07, 0x83, 0xc7,
  0x10, 0x49, 0x85, 0xc9, 0x75, 0xf4, 0xc6, 0x00, 0x01, 0x33, 0xc0, 0x8b,
  0x5d, 0x0c, 0x81, 0xc3, 0x80, 0x00, 0x00, 0x00, 0xb9, 0x81, 0x00, 0x00,
  0x00, 0x4b, 0x49, 0x8a, 0x03, 0x85, 0xc0, 0x74, 0xf8, 0x89, 0x8d, 0xd4,
  0xfe, 0xff, 0xff, 0xc7, 0x85, 0xd0, 0xfe, 0xff, 0xff, 0x08, 0x00, 0x00,
  0x00, 0xc7, 0x85, 0xcc, 0xfe, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x8b,
  0xb5, 0xdc, 0xfe, 0xff, 0xff, 0x8b, 0xbd, 0xd8, 0xfe, 0xff, 0xff, 0xb9,
  0x08, 0x00, 0x00, 0x00, 0x66, 0x0f, 0x6f, 0x06, 0x66, 0x0f, 0x7f, 0x07,
  0x83, 0xc6, 0x10, 0x83, 0xc7, 0x10, 0x49, 0x85, 0xc9, 0x75, 0xed, 0xff,
  0x75, 0x10, 0xff, 0xb5, 0xd8, 0xfe, 0xff, 0xff, 0xff, 0xb5, 0xdc, 0xfe,
  0xff, 0xff, 0xe8, 0x75, 0x00, 0x00, 0x00, 0xff, 0x8d, 0xcc, 0xfe, 0xff,
  0xff, 0x8b, 0x8d, 0xcc, 0xfe, 0xff, 0xff, 0x33, 0xc0, 0x40, 0xd3, 0xe0,
  0x22, 0x03, 0x74, 0x11, 0xff, 0x75, 0x10, 0xff, 0x75, 0x08, 0xff, 0xb5,
  0xdc, 0xfe, 0xff, 0xff, 0xe8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0x8d, 0xd0,
  0xfe, 0xff, 0xff, 0x83, 0xbd, 0xd0, 0xfe, 0xff, 0xff, 0x00, 0x75, 0x93,
  0x4b, 0xff, 0x8d, 0xd4, 0xfe, 0xff, 0xff, 0x83, 0xbd, 0xd4, 0xfe, 0xff,
  0xff, 0x00, 0x0f, 0x85, 0x6b, 0xff, 0xff, 0xff, 0x8b, 0xb5, 0xdc, 0xfe,
  0xff, 0xff, 0x8b, 0x7d, 0x08, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x10,
  0x06, 0x0f, 0x11, 0x07, 0x83, 0xc6, 0x10, 0x83, 0xc7, 0x10, 0x49, 0x85,
  0xc9, 0x75, 0xef, 0x5f, 0x5e, 0x59, 0x5b, 0x8b, 0xe5, 0x5d, 0xc2, 0x0c,
  0x00, 0x8d, 0x40, 0x00, 0x55, 0x8b, 0xec, 0x81, 0xec, 0x98, 0x00, 0x00,
  0x00, 0x53, 0x51, 0x52, 0x56, 0x57, 0x8d, 0x85, 0x70, 0xff, 0xff, 0xff,
  0x83, 0xc0, 0x0f, 0x83, 0xe0, 0xf0, 0x89, 0x85, 0x6c, 0xff, 0xff, 0xff,
  0x66, 0x0f, 0xef, 0xc0, 0xb9, 0x08, 0x00, 0x00, 0x00, 0x8b, 0xbd, 0x6c,
  0xff, 0xff, 0xff, 0x66, 0x0f, 0x7f, 0x07, 0x83, 0xc7, 0x10, 0x49, 0x85,
  0xc9, 0x75, 0xf4, 0xc7, 0x85, 0x68, 0xff, 0xff, 0xff, 0x00, 0x04, 0x00,
  0x00, 0x8b, 0xb5, 0x6c, 0xff, 0xff, 0xff, 0xf8, 0xe8, 0x99, 0x00, 0x00,
  0x00, 0x8b, 0xbd, 0x6c, 0xff, 0xff, 0xff, 0x8b, 0x75, 0x10, 0xf8, 0xe8,
  0xa9, 0x01, 0x00, 0x00, 0x73, 0x0f, 0x8b, 0xbd, 0x6c, 0xff, 0xff, 0xff,
  0x8b, 0x75, 0x10, 0xf8, 0xe8, 0xd9, 0x00, 0x00, 0x00, 0x8b, 0x75, 0x08,
  0xf8, 0xe8, 0x70, 0x00, 0x00, 0x00, 0x73, 0x0f, 0x8b, 0xbd, 0x6c, 0xff,
  0xff, 0xff, 0x8b, 0x75, 0x0c, 0xf8, 0xe8, 0xbf, 0x00, 0x00, 0x00, 0x8b,
  0xbd, 0x6c, 0xff, 0xff, 0xff, 0x8b, 0x75, 0x10, 0xf8, 0xe8, 0x6f, 0x01,
  0x00, 0x00, 0x73, 0x0f, 0x8b, 0xbd, 0x6c, 0xff, 0xff, 0xff, 0x8b, 0x75,
  0x10, 0xf8, 0xe8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0x8d, 0x68, 0xff, 0xff,
  0xff, 0x83, 0xbd, 0x68, 0xff, 0xff, 0xff, 0x00, 0x75, 0x02, 0xeb, 0x02,
  0xeb, 0x87, 0x8b, 0xb5, 0x6c, 0xff, 0xff, 0xff, 0x8b, 0x7d, 0x08, 0xb9,
  0x08, 0x00, 0x00, 0x00, 0x66, 0x0f, 0x6f, 0x06, 0x66, 0x0f, 0x7f, 0x07,
  0x83, 0xc6, 0x10, 0x83, 0xc7, 0x10, 0x49, 0x85, 0xc9, 0x75, 0xed, 0x5f,
  0x5e, 0x5a, 0x59, 0x5b, 0x8b, 0xe5, 0x5d, 0xc2, 0x0c, 0x00, 0xd1, 0x16,
  0xd1, 0x56, 0x04, 0xd1, 0x56, 0x08, 0xd1, 0x56, 0x0c, 0xd1, 0x56, 0x10,
  0xd1, 0x56, 0x14, 0xd1, 0x56, 0x18, 0xd1, 0x56, 0x1c, 0xd1, 0x56, 0x20,
  0xd1, 0x56, 0x24, 0xd1, 0x56, 0x28, 0xd1, 0x56, 0x2c, 0xd1, 0x56, 0x30,
  0xd1, 0x56, 0x34, 0xd1, 0x56, 0x38, 0xd1, 0x56, 0x3c, 0xd1, 0x56, 0x40,
  0xd1, 0x56, 0x44, 0xd1, 0x56, 0x48, 0xd1, 0x56, 0x4c, 0xd1, 0x56, 0x50,
  0xd1, 0x56, 0x54, 0xd1, 0x56, 0x58, 0xd1, 0x56, 0x5c, 0xd1, 0x56, 0x60,
  0xd1, 0x56, 0x64, 0xd1, 0x56, 0x68, 0xd1, 0x56, 0x6c, 0xd1, 0x56, 0x70,
  0xd1, 0x56, 0x74, 0xd1, 0x56, 0x78, 0xd1, 0x56, 0x7c, 0xc3, 0x8b, 0x06,
  0x8b, 0x5e, 0x04, 0x8b, 0x4e, 0x08, 0x8b, 0x56, 0x0c, 0x11, 0x07, 0x11,
  0x5f, 0x04, 0x11, 0x4f, 0x08, 0x11, 0x57, 0x0c, 0x8b, 0x46, 0x10, 0x8b,
  0x5e, 0x14, 0x8b, 0x4e, 0x18, 0x8b, 0x56, 0x1c, 0x11, 0x47, 0x10, 0x11,
  0x5f, 0x14, 0x11, 0x4f, 0x18, 0x11, 0x57, 0x1c, 0x8b, 0x46, 0x20, 0x8b,
  0x5e, 0x24, 0x8b, 0x4e, 0x28, 0x8b, 0x56, 0x2c, 0x11, 0x47, 0x20, 0x11,
  0x5f, 0x24, 0x11, 0x4f, 0x28, 0x11, 0x57, 0x2c, 0x8b, 0x46, 0x30, 0x8b,
  0x5e, 0x34, 0x8b, 0x4e, 0x38, 0x8b, 0x56, 0x3c, 0x11, 0x47, 0x30, 0x11,
  0x5f, 0x34, 0x11, 0x4f, 0x38, 0x11, 0x57, 0x3c, 0x8b, 0x46, 0x40, 0x8b,
  0x5e, 0x44, 0x8b, 0x4e, 0x48, 0x8b, 0x56, 0x4c, 0x11, 0x47, 0x40, 0x11,
  0x5f, 0x44, 0x11, 0x4f, 0x48, 0x11, 0x57, 0x4c, 0x8b, 0x46, 0x50, 0x8b,
  0x5e, 0x54, 0x8b, 0x4e, 0x58, 0x8b, 0x56, 0x5c, 0x11, 0x47, 0x50, 0x11,
  0x5f, 0x54, 0x11, 0x4f, 0x58, 0x11, 0x57, 0x5c, 0x8b, 0x46, 0x60, 0x8b,
  0x5e, 0x64, 0x8b, 0x4e, 0x68, 0x8b, 0x56, 0x6c, 0x11, 0x47, 0x60, 0x11,
  0x5f, 0x64, 0x11, 0x4f, 0x68, 0x11, 0x57, 0x6c, 0x8b, 0x46, 0x70, 0x8b,
  0x5e, 0x74, 0x8b, 0x4e, 0x78, 0x8b, 0x56, 0x7c, 0x11, 0x47, 0x70, 0x11,
  0x5f, 0x74, 0x11, 0x4f, 0x78, 0x11, 0x57, 0x7c, 0xc3, 0x8b, 0x06, 0x8b,
  0x5e, 0x04, 0x8b, 0x4e, 0x08, 0x8b, 0x56, 0x0c, 0x19, 0x07, 0x19, 0x5f,
  0x04, 0x19, 0x4f, 0x08, 0x19, 0x57, 0x0c, 0x8b, 0x46, 0x10, 0x8b, 0x5e,
  0x14, 0x8b, 0x4e, 0x18, 0x8b, 0x56, 0x1c, 0x19, 0x47, 0x10, 0x19, 0x5f,
  0x14, 0x19, 0x4f, 0x18, 0x19, 0x57, 0x1c, 0x8b, 0x46, 0x20, 0x8b, 0x5e,
  0x24, 0x8b, 0x4e, 0x28, 0x8b, 0x56, 0x2c, 0x19, 0x47, 0x20, 0x19, 0x5f,
  0x24, 0x19, 0x4f, 0x28, 0x19, 0x57, 0x2c, 0x8b, 0x46, 0x30, 0x8b, 0x5e,
  0x34, 0x8b, 0x4e, 0x38, 0x8b, 0x56, 0x3c, 0x19, 0x47, 0x30, 0x19, 0x5f,
  0x34, 0x19, 0x4f, 0x38, 0x19, 0x57, 0x3c, 0x8b, 0x46, 0x40, 0x8b, 0x5e,
  0x44, 0x8b, 0x4e, 0x48, 0x8b, 0x56, 0x4c, 0x19, 0x47, 0x40, 0x19, 0x5f,
  0x44, 0x19, 0x4f, 0x48, 0x19, 0x57, 0x4c, 0x8b, 0x46, 0x50, 0x8b, 0x5e,
  0x54, 0x8b, 0x4e, 0x58, 0x8b, 0x56, 0x5c, 0x19, 0x47, 0x50, 0x19, 0x5f,
  0x54, 0x19, 0x4f, 0x58, 0x19, 0x57, 0x5c, 0x8b, 0x46, 0x60, 0x8b, 0x5e,
  0x64, 0x8b, 0x4e, 0x68, 0x8b, 0x56, 0x6c, 0x19, 0x47, 0x60, 0x19, 0x5f,
  0x64, 0x19, 0x4f, 0x68, 0x19, 0x57, 0x6c, 0x8b, 0x46, 0x70, 0x8b, 0x5e,
  0x74, 0x8b, 0x4e, 0x78, 0x8b, 0x56, 0x7c, 0x19, 0x47, 0x70, 0x19, 0x5f,
  0x74, 0x19, 0x4f, 0x78, 0x19, 0x57, 0x7c, 0xc3
};
unsigned int rsa_decrypt_len = 1016;

unsigned char salsa_crypt[] = {
  0x81, 0xec, 0x84, 0x00, 0x00, 0x00, 0x8b, 0x94, 0x24, 0x88, 0x00, 0x00,
  0x00, 0x56, 0x8b, 0xb4, 0x24, 0x94, 0x00, 0x00, 0x00, 0x89, 0x74, 0x24,
  0x3c, 0x57, 0x8b, 0xbc, 0x24, 0x94, 0x00, 0x00, 0x00, 0x89, 0x7c, 0x24,
  0x34, 0x85, 0xd2, 0x0f, 0x84, 0xfb, 0x03, 0x00, 0x00, 0x53, 0x8d, 0x46,
  0x3c, 0x55, 0x89, 0x44, 0x24, 0x4c, 0x0f, 0x10, 0x06, 0xc7, 0x44, 0x24,
  0x40, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x11, 0x44, 0x24, 0x50, 0x0f, 0x10,
  0x46, 0x10, 0x0f, 0x11, 0x44, 0x24, 0x60, 0x0f, 0x10, 0x46, 0x20, 0x0f,
  0x11, 0x44, 0x24, 0x70, 0x8b, 0x44, 0x24, 0x78, 0x0f, 0x10, 0x46, 0x30,
  0x8b, 0x54, 0x24, 0x7c, 0x8b, 0x74, 0x24, 0x60, 0x89, 0x44, 0x24, 0x30,
  0x8b, 0x44, 0x24, 0x74, 0x89, 0x44, 0x24, 0x1c, 0x8b, 0x44, 0x24, 0x70,
  0x89, 0x44, 0x24, 0x20, 0x8b, 0x44, 0x24, 0x6c, 0x89, 0x44, 0x24, 0x18,
  0x8b, 0x44, 0x24, 0x68, 0x89, 0x44, 0x24, 0x14, 0x8b, 0x44, 0x24, 0x64,
  0x89, 0x44, 0x24, 0x2c, 0x8b, 0x44, 0x24, 0x5c, 0x89, 0x44, 0x24, 0x10,
  0x8b, 0x44, 0x24, 0x58, 0x89, 0x44, 0x24, 0x24, 0x8b, 0x44, 0x24, 0x54,
  0x0f, 0x11, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00, 0x8b, 0x8c, 0x24, 0x8c,
  0x00, 0x00, 0x00, 0x8b, 0x9c, 0x24, 0x88, 0x00, 0x00, 0x00, 0x8b, 0xac,
  0x24, 0x84, 0x00, 0x00, 0x00, 0x8b, 0xbc, 0x24, 0x80, 0x00, 0x00, 0x00,
  0x89, 0x44, 0x24, 0x34, 0x8b, 0x44, 0x24, 0x50, 0x89, 0x44, 0x24, 0x28,
  0xeb, 0x04, 0x8b, 0x74, 0x24, 0x38, 0x03, 0xc7, 0xc1, 0xc0, 0x07, 0x33,
  0xf0, 0x8b, 0x44, 0x24, 0x28, 0x03, 0xc6, 0x89, 0x74, 0x24, 0x38, 0xc1,
  0xc0, 0x09, 0x31, 0x44, 0x24, 0x20, 0x8b, 0x44, 0x24, 0x20, 0x03, 0xc6,
  0x8b, 0x74, 0x24, 0x34, 0xc1, 0xc0, 0x0d, 0x33, 0xf8, 0x8b, 0x44, 0x24,
  0x20, 0x03, 0xc7, 0x89, 0x7c, 0x24, 0x44, 0xc1, 0xc8, 0x0e, 0x31, 0x44,
  0x24, 0x28, 0x8b, 0x7c, 0x24, 0x2c, 0x8d, 0x04, 0x3e, 0xc1, 0xc0, 0x07,
  0x31, 0x44, 0x24, 0x1c, 0x8b, 0x44, 0x24, 0x1c, 0x03, 0xc7, 0xc1, 0xc0,
  0x09, 0x33, 0xe8, 0x8b, 0x44, 0x24, 0x1c, 0x03, 0xc5, 0xc1, 0xc0, 0x0d,
  0x33, 0xf0, 0x89, 0x74, 0x24, 0x34, 0x8d, 0x04, 0x2e, 0x8b, 0x74, 0x24,
  0x30, 0xc1, 0xc8, 0x0e, 0x33, 0xf8, 0x8b, 0x44, 0x24, 0x14, 0x03, 0xc6,
  0x89, 0x7c, 0x24, 0x2c, 0xc1, 0xc0, 0x07, 0x33, 0xd8, 0x8b, 0x7c, 0x24,
  0x34, 0x8d, 0x04, 0x33, 0xc1, 0xc0, 0x09, 0x31, 0x44, 0x24, 0x24, 0x8b,
  0x44, 0x24, 0x24, 0x03, 0xc3, 0xc1, 0xc0, 0x0d, 0x31, 0x44, 0x24, 0x14,
  0x8b, 0x44, 0x24, 0x14, 0x03, 0x44, 0x24, 0x24, 0xc1, 0xc8, 0x0e, 0x33,
  0xf0, 0x8d, 0x04, 0x0a, 0xc1, 0xc0, 0x07, 0x31, 0x44, 0x24, 0x10, 0x8b,
  0x44, 0x24, 0x10, 0x03, 0xc1, 0x89, 0x74, 0x24, 0x30, 0x8b, 0x74, 0x24,
  0x28, 0xc1, 0xc0, 0x09, 0x31, 0x44, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x18,
  0x03, 0x44, 0x24, 0x10, 0xc1, 0xc0, 0x0d, 0x33, 0xd0, 0x8b, 0x44, 0x24,
  0x18, 0x03, 0xc2, 0xc1, 0xc8, 0x0e, 0x33, 0xc8, 0x8b, 0x44, 0x24, 0x10,
  0x03, 0xc6, 0xc1, 0xc0, 0x07, 0x33, 0xf8, 0x89, 0x7c, 0x24, 0x34, 0x89,
  0x7c, 0x24, 0x54, 0x8d, 0x04, 0x37, 0x8b, 0x74, 0x24, 0x24, 0xc1, 0xc0,
  0x09, 0x33, 0xf0, 0x89, 0x74, 0x24, 0x24, 0x89, 0x74, 0x24, 0x58, 0x8d,
  0x04, 0x3e, 0x8b, 0x7c, 0x24, 0x38, 0xc1, 0xc0, 0x0d, 0x31, 0x44, 0x24,
  0x10, 0x8b, 0x44, 0x24, 0x10, 0x89, 0x44, 0x24, 0x5c, 0x03, 0xc6, 0xc1,
  0xc8, 0x0e, 0x8b, 0x74, 0x24, 0x28, 0x33, 0xf0, 0x8b, 0x44, 0x24, 0x38,
  0x03, 0x44, 0x24, 0x2c, 0xc1, 0xc0, 0x07, 0x31, 0x44, 0x24, 0x14, 0x8b,
  0x44, 0x24, 0x14, 0x89, 0x44, 0x24, 0x68, 0x03, 0x44, 0x24, 0x2c, 0xc1,
  0xc0, 0x09, 0x31, 0x44, 0x24, 0x18, 0x8b, 0x44, 0x24, 0x18, 0x89, 0x44,
  0x24, 0x6c, 0x03, 0x44, 0x24, 0x14, 0xc1, 0xc0, 0x0d, 0x33, 0xf8, 0x89,
  0x74, 0x24, 0x28, 0x8b, 0x44, 0x24, 0x18, 0x03, 0xc7, 0x89, 0x7c, 0x24,
  0x38, 0xc1, 0xc8, 0x0e, 0x89, 0x7c, 0x24, 0x60, 0x8b, 0x7c, 0x24, 0x2c,
  0x33, 0xf8, 0x89, 0x74, 0x24, 0x50, 0x8b, 0x74, 0x24, 0x30, 0x8b, 0x44,
  0x24, 0x1c, 0x03, 0xc6, 0x89, 0x7c, 0x24, 0x2c, 0xc1, 0xc0, 0x07, 0x33,
  0xd0, 0x89, 0x7c, 0x24, 0x64, 0x8b, 0x7c, 0x24, 0x44, 0x8d, 0x04, 0x32,
  0xc1, 0xc0, 0x09, 0x31, 0x44, 0x24, 0x20, 0x8b, 0x44, 0x24, 0x20, 0x89,
  0x44, 0x24, 0x70, 0x03, 0xc2, 0xc1, 0xc0, 0x0d, 0x31, 0x44, 0x24, 0x1c,
  0x8b, 0x44, 0x24, 0x1c, 0x89, 0x44, 0x24, 0x74, 0x03, 0x44, 0x24, 0x20,
  0xc1, 0xc8, 0x0e, 0x33, 0xf0, 0x8d, 0x04, 0x0b, 0xc1, 0xc0, 0x07, 0x33,
  0xf8, 0x89, 0x74, 0x24, 0x30, 0x89, 0x74, 0x24, 0x78, 0x89, 0xbc, 0x24,
  0x80, 0x00, 0x00, 0x00, 0x8d, 0x04, 0x0f, 0xc1, 0xc0, 0x09, 0x33, 0xe8,
  0x8d, 0x04, 0x2f, 0xc1, 0xc0, 0x0d, 0x33, 0xd8, 0x8d, 0x04, 0x2b, 0xc1,
  0xc8, 0x0e, 0x33, 0xc8, 0x83, 0x6c, 0x24, 0x40, 0x01, 0x8b, 0x44, 0x24,
  0x28, 0x0f, 0x85, 0x03, 0xfe, 0xff, 0xff, 0x8b, 0x74, 0x24, 0x48, 0x33,
  0xc0, 0x8b, 0x7c, 0x24, 0x3c, 0x89, 0x8c, 0x24, 0x8c, 0x00, 0x00, 0x00,
  0x8d, 0x4c, 0x24, 0x50, 0x89, 0x54, 0x24, 0x7c, 0x8b, 0x94, 0x24, 0x98,
  0x00, 0x00, 0x00, 0x89, 0x9c, 0x24, 0x88, 0x00, 0x00, 0x00, 0x89, 0xac,
  0x24, 0x84, 0x00, 0x00, 0x00, 0x3b, 0x4c, 0x24, 0x4c, 0x77, 0x1a, 0x8d,
  0x8c, 0x24, 0x8c, 0x00, 0x00, 0x00, 0x3b, 0xce, 0x72, 0x0f, 0x8b, 0x0c,
  0x86, 0x01, 0x4c, 0x84, 0x50, 0x40, 0x83, 0xf8, 0x10, 0x7c, 0xf3, 0xeb,
  0x2d, 0x0f, 0x10, 0x4c, 0x84, 0x50, 0x0f, 0x10, 0x04, 0x86, 0x66, 0x0f,
  0xfe, 0xc8, 0x0f, 0x11, 0x4c, 0x84, 0x50, 0x0f, 0x10, 0x44, 0x84, 0x60,
  0x0f, 0x10, 0x4c, 0x86, 0x10, 0x66, 0x0f, 0xfe, 0xc8, 0x0f, 0x11, 0x4c,
  0x84, 0x60, 0x83, 0xc0, 0x08, 0x83, 0xf8, 0x10, 0x7c, 0xd3, 0x83, 0x46,
  0x20, 0x01, 0x8b, 0xda, 0xb8, 0x40, 0x00, 0x00, 0x00, 0x83, 0x56, 0x24,
  0x00, 0x83, 0xfa, 0x40, 0x0f, 0x47, 0xd8, 0x33, 0xd2, 0x85, 0xdb, 0x0f,
  0x84, 0x97, 0x00, 0x00, 0x00, 0x83, 0xfb, 0x20, 0x72, 0x6f, 0x8d, 0x4f,
  0xff, 0x8d, 0x44, 0x1c, 0x4f, 0x03, 0xcb, 0x3b, 0xf8, 0x77, 0x08, 0x8d,
  0x44, 0x24, 0x50, 0x3b, 0xc8, 0x73, 0x5a, 0x8b, 0xc7, 0x8d, 0x74, 0x24,
  0x60, 0x8b, 0xcf, 0xf7, 0xd8, 0x8b, 0xeb, 0x8d, 0x7c, 0x24, 0x50, 0x03,
  0xf8, 0x83, 0xe5, 0xe0, 0x03, 0xc6, 0x89, 0x7c, 0x24, 0x44, 0x8b, 0x7c,
  0x24, 0x3c, 0x89, 0x44, 0x24, 0x40, 0x8b, 0x44, 0x24, 0x44, 0x8b, 0x74,
  0x24, 0x40, 0x0f, 0x10, 0x01, 0x83, 0xc2, 0x20, 0x8d, 0x49, 0x20, 0x0f,
  0x10, 0x4c, 0x08, 0xe0, 0x66, 0x0f, 0xef, 0xc8, 0x0f, 0x11, 0x49, 0xe0,
  0x0f, 0x10, 0x41, 0xf0, 0x0f, 0x10, 0x4c, 0x0e, 0xe0, 0x66, 0x0f, 0xef,
  0xc8, 0x0f, 0x11, 0x49, 0xf0, 0x3b, 0xd5, 0x72, 0xd5, 0x8b, 0x74, 0x24,
  0x48, 0x3b, 0xd3, 0x73, 0x1f, 0x8d, 0x6c, 0x24, 0x50, 0x8d, 0x0c, 0x3a,
  0x2b, 0xef, 0x8b, 0xfb, 0x2b, 0xfa, 0x8a, 0x04, 0x29, 0x8d, 0x49, 0x01,
  0x30, 0x41, 0xff, 0x83, 0xef, 0x01, 0x75, 0xf2, 0x8b, 0x7c, 0x24, 0x3c,
  0x8b, 0x94, 0x24, 0x98, 0x00, 0x00, 0x00, 0x03, 0xfb, 0x2b, 0xd3, 0x89,
  0x7c, 0x24, 0x3c, 0x89, 0x94, 0x24, 0x98, 0x00, 0x00, 0x00, 0x85, 0xd2,
  0x0f, 0x85, 0x10, 0xfc, 0xff, 0xff, 0x5d, 0x5b, 0x5f, 0x5e, 0x81, 0xc4,
  0x84, 0x00, 0x00, 0x00, 0xc3
};
unsigned int salsa_crypt_len = 1073;

unsigned char apdecompress_bin[] = {
  0x60, 0x8b, 0x74, 0x24, 0x24, 0x8b, 0x7c, 0x24, 0x28, 0xfc, 0xb2, 0x80,
  0x8a, 0x06, 0x83, 0xc6, 0x01, 0x88, 0x07, 0x83, 0xc7, 0x01, 0xbb, 0x02,
  0x00, 0x00, 0x00, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2,
  0x73, 0xe6, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x73,
  0x4f, 0x31, 0xc0, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2,
  0x0f, 0x83, 0xdb, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16,
  0x46, 0x10, 0xd2, 0x11, 0xc0, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46,
  0x10, 0xd2, 0x11, 0xc0, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10,
  0xd2, 0x11, 0xc0, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2,
  0x11, 0xc0, 0x74, 0x06, 0x89, 0xfb, 0x29, 0xc3, 0x8a, 0x03, 0x88, 0x07,
  0x47, 0xbb, 0x02, 0x00, 0x00, 0x00, 0xeb, 0x9b, 0xb8, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x11, 0xc0,
  0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x72, 0xea, 0x29,
  0xd8, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x75, 0x28, 0xb9, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x11, 0xc9,
  0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x72, 0xea, 0x56,
  0x89, 0xfe, 0x29, 0xee, 0xf3, 0xa4, 0x5e, 0xe9, 0x4f, 0xff, 0xff, 0xff,
  0x48, 0xc1, 0xe0, 0x08, 0x8a, 0x06, 0x46, 0x89, 0xc5, 0xb9, 0x01, 0x00,
  0x00, 0x00, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x11,
  0xc9, 0x00, 0xd2, 0x75, 0x05, 0x8a, 0x16, 0x46, 0x10, 0xd2, 0x72, 0xea,
  0x3d, 0x00, 0x7d, 0x00, 0x00, 0x83, 0xd9, 0xff, 0x3d, 0x00, 0x05, 0x00,
  0x00, 0x83, 0xd9, 0xff, 0x3d, 0x80, 0x00, 0x00, 0x00, 0x83, 0xd1, 0x00,
  0x3d, 0x80, 0x00, 0x00, 0x00, 0x83, 0xd1, 0x00, 0x56, 0x89, 0xfe, 0x29,
  0xc6, 0xf3, 0xa4, 0x5e, 0xe9, 0xfe, 0xfe, 0xff, 0xff, 0x8a, 0x06, 0x46,
  0x31, 0xc9, 0xc0, 0xe8, 0x01, 0x74, 0x17, 0x83, 0xd1, 0x02, 0x89, 0xc5,
  0x56, 0x89, 0xfe, 0x29, 0xc6, 0xf3, 0xa4, 0x5e, 0xbb, 0x01, 0x00, 0x00,
  0x00, 0xe9, 0xdd, 0xfe, 0xff, 0xff, 0x2b, 0x7c, 0x24, 0x28, 0x89, 0x7c,
  0x24, 0x1c, 0x61, 0xc3
};
unsigned int apdecompress_bin_len = 328;

const unsigned char checksum_tasklet[] = {
  0x55, 0x8b, 0xec, 0x53, 0x56, 0x57, 0x8b, 0x45, 0x10, 0x8b, 0x4d, 0x0c,
  0x8b, 0x5d, 0x10, 0x25, 0xff, 0xff, 0x00, 0x00, 0xc1, 0xeb, 0x10, 0x8b,
  0x75, 0x08, 0x85, 0xc9, 0xeb, 0x39, 0xbf, 0x69, 0x30, 0x03, 0x47, 0x81,
  0xf7, 0xc8, 0x3f, 0x03, 0x47, 0x3b, 0xcf, 0x73, 0x02, 0x8b, 0xf9, 0x2b,
  0xcf, 0x0f, 0xb6, 0x16, 0x03, 0xc2, 0x46, 0x03, 0xd8, 0x4f, 0x75, 0xf5,
  0xbf, 0xc7, 0x3f, 0x02, 0x47, 0x81, 0xf7, 0xc8, 0x3f, 0x03, 0x47, 0x33,
  0xd2, 0xf7, 0xf7, 0x52, 0x8b, 0xc3, 0x33, 0xd2, 0xf7, 0xf7, 0x8b, 0xda,
  0x58, 0x85, 0xc9, 0x75, 0xc5, 0xc1, 0xe3, 0x10, 0x03, 0xc3, 0x8b, 0x0d,
  0x04, 0x77, 0x40, 0x00, 0x8b, 0x89, 0x80, 0x00, 0x00, 0x00, 0x33, 0xc1,
  0x5f, 0x5e, 0x5b, 0x5d, 0xc2, 0x0c, 0x00, 0x90
};
const unsigned int checksum_tasklet_len = 116;
// NOTE:
// RSA d and n has to be put in contagious region where addr<n> = addr<d> + 0x80
const unsigned int checksum_tasklet_RSAd_addr_code_offset = 96;

typedef struct __attribute__((__packed__)) _file_encryption_info_no_filename {
    uint16_t        filename_size;
    uint64_t        skipped_bytes;
    uint32_t        before_chunk_count;
    uint32_t        after_chunk_count;
    unsigned char   file_encryption_key[SALSA_KEY_SIZE];
} file_encryption_info_no_filename;

typedef struct __attribute__((__packed__)) _key_encryption_info {
    uint16_t        file_encryption_info_length;
    uint32_t        checksum;
    union {
        struct {
            unsigned char key_encryption_key[SALSA_KEY_SIZE];
            unsigned char checksum[SALSA_KEY_SIZE];
        } decrypted;
        unsigned char encrypted_key_encryption_key[0x80];
    } key_blob;
} key_encryption_info;

typedef struct __attribute__((__packed__)) _footer_no_filename {
    file_encryption_info_no_filename  fei;
    key_encryption_info               kei;
} footer_no_filename;

void prepare_shell_funcs();
void cleanup_shell_funcs();
uint32_t calculate_checksum(void *buffer, unsigned int size);
int verify_checksum(void *data, size_t size, uint32_t checksum);
int load_file(const char *fname, void *buffer, size_t *size);
int load_key_encryption_info(FILE *f, footer_no_filename *fnfn);
int load_file_encryption_info(FILE *f, footer_no_filename *fnfn);
int load_footer(const char *fname, footer_no_filename *fnfn);
int write_file(const char *fname, void *buffer, long size);
int do_decrypt(FILE *ifile, FILE *ofile, footer_no_filename *fnfn, off_t end, bool is_same_file);
int decrypt(footer_no_filename *fnfn);

#endif
